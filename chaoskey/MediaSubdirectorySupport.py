# -*- coding: utf-8 -*-# 我的Anki插件# 作者：混沌(youliang@chaoskey.com), http://blog.chaoskey.com# 支持多媒体子目录import os,re,tracebackfrom aqt import mwfrom aqt.qt import *from comm import wrap,onLoad,onSwitchfrom aqt.utils import  showInfodef depthListDir(top,path=""):    paths=[]    files=os.listdir(os.path.join(top, path))    for f in files:        _path = f        if path!="":            _path=os.path.join(path,_path)        if f.startswith("_"):            continue        if os.path.isfile(os.path.join(top, _path)):            paths.append(_path.replace("\\","/"))        else:            paths.extend(depthListDir(top,_path))    return pathsoldMediaCheck = Nonedef newMediaCheck(_old,local=None):    if local is None:        mediadir = re.sub("(?i)\.(anki2)$", ".media", mw.col.path)        local=depthListDir(mediadir)    return _old(local)oldMediaAllMedia = Nonedef newMediaAllMedia(_old):    files = set()    for f in _old():        files.add(f.replace("\\","/"))    return filestimer=QTimer()def _load():    if not (hasattr(mw,"col") and  mw.col and hasattr(mw.col,"media") and mw.col.media):        return    global oldMediaCheck,oldMediaAllMedia    oldMediaCheck = mw.col.media.check    oldMediaAllMedia = mw.col.media.allMedia    mw.col.media.check = wrap(mw.col.media.check, newMediaCheck,pos="replace")    mw.col.media.allMedia = wrap(mw.col.media.allMedia, newMediaAllMedia,pos="replace")    timer.stop()    timer.disconnect(timer, SIGNAL('timeout()'), _load)def load():    timer.connect(timer, SIGNAL('timeout()'), _load)    timer.start(1000)def unload():    global oldMediaCheck    if oldMediaCheck:        mw.col.media.check=oldMediaCheck        mw.col.media.allMedia=oldMediaAllMedia# 本模块的信息ModuleInfo = {'name': u'支持多媒体子目录'}plugName=os.path.basename(__file__).replace(".py", "")# 添加功能开关action=QAction(ModuleInfo["name"], mw)action.setCheckable(True)action.connect(action, SIGNAL("triggered()"),lambda:onSwitch(load,unload,action,plugName))ModuleInfo.update({"action":action})# 功能加载onLoad(load,action,plugName)